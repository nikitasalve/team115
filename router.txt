Angular Router is a powerful JavaScript router built and maintained by the Angular core team that can be installed from the @angular/router package. 
The Angular router is a core part of the Angular platform. It enables developers to build Single Page Applications with multiple views and allow navigation between these views.

The Angular Router enables navigation from one view to the next as users perform application tasks.

for that you have to import 
import { RouterModule, Routes } from '@angular/router';
in app.module.ts

Configuration

 When the browser's URL changes, that router looks for a corresponding Route from which it can determine the component to display.

to create a routes defination:
const appRoutes: Routes = [
  { path: 'path_name', component: component_name }
  { path: 'heroes', component: HeroesComponent }
];

configures the router via the RouterModule.forRoot method, and adds the result to the AppModule's imports array
@NgModule({
  imports: [
    RouterModule.forRoot(
      appRoutes,
      { enableTracing: true } // <-- debugging purposes only
    )
    // other imports here
  ],

The appRoutes array of routes describes how to navigate.  Pass it to the RouterModule.forRoot method in the module imports to configure the router.
Each Route maps a URL path to a component. The router parses and builds the final URL for you, allowing you to use both relative and absolute paths when navigating between application views.


default Routes
The empty path in the route represents the default path for the application, the place to go when the path in the URL is empty, as it typically is at the start.


The order of the routes in the configuration matters and this is by design. the router uses a first-match wins strategy when matching routes, so more specific routes should be placed above less specific routes

In the configuration above, routes with a static path are listed first, followed by an empty path route, that matches the default route. The wildcard route comes last because it matches every URL and should be selected only if no other routes are matched first.


Router outlet
The RouterOutlet is a directive from the router library that is used like a component. It acts as a placeholder that marks the spot in the template where the router should display the components for that outlet.

<router-outlet></router-outlet>
<!-- Routed components go here -->

Given the configuration above, when the browser URL for this application becomes /heroes, the router matches that URL to the route path /heroes and displays the HeroListComponent as a sibling element to the RouterOutlet that you've placed in the host component's template.

Router Links  
One time binding:
we configure the routers then for navigating 
example:
<nav>
  <a routerLink="/crisis-center" routerLinkActive="active">Crisis Center</a>
  <a routerLink="/heroes" routerLinkActive="active">Heroes</a>
</nav>
<router-outlet></router-outlet> 

for dynamic binding we use RouterLinkActive 
The RouterLinkActive directive toggles css classes for active RouterLink bindings based on the current RouterState.
On each anchor tag, you see a property binding to the RouterLinkActive directive that look like routerLinkActive="...".



Router State: 
After the end of each successful navigation lifecycle, the router builds a tree of ActivatedRoute objects that make up the current state of the router. You can access the current RouterState from anywhere in the application using the Router service and the routerState property.

Activated Router:

The route path and parameters are available through an injected router service called the ActivatedRoute.
property:- discription
1) url:- An Observable of the route path(s), represented as an array of strings for each part of the route path.
2) paramMap:- An Observable that contains a map of the required and optional parameters specific to the route. The map supports retrieving single and multiple values from the same parameter
3) queryParamMap:- An Observable that contains a map of the query parameters available to all routes. The map supports retrieving single and multiple values from the query parameter.
4) fragment :- An Observable of the URL fragment available to all routes.
5) outlet :- The name of the RouterOutlet used to render the route. For an unnamed outlet, the outlet name is primary.
6) routeConfig :- The route configuration used for the route that contains the origin path.
7) parent :- The route's parent ActivatedRoute when this route is a child route.
8) firstChild :- Contains the first ActivatedRoute in the list of this route's child routes.
9) childern :- 	Contains all the child routes activated under the current route.